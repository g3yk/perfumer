basePath: /api
definitions:
  handler.AddPerfumetoOrderInput:
    properties:
      order_id:
        example: 1
        type: integer
      perfume_ids:
        example:
        - 1
        items:
          type: integer
        type: array
    type: object
  handler.CreatePerfumeInput:
    properties:
      amount:
        example: 1
        type: integer
      baseNotes:
        example:
        - 1
        items:
          type: integer
        type: array
      heartNotes:
        example:
        - 1
        items:
          type: integer
        type: array
      name:
        type: string
      topNotes:
        example:
        - 1
        items:
          type: integer
        type: array
    type: object
  handler.CreatePerfumeNoteInput:
    properties:
      note:
        example: Amber
        type: string
    required:
    - note
    type: object
  handler.CreatePerfumeNoteResponse:
    properties:
      note:
        example: Amber
        type: string
      perfume_note_id:
        example: 1
        type: integer
    required:
    - note
    - perfume_note_id
    type: object
  handler.CreatePerfumeResponse:
    properties:
      amount:
        example: 1
        type: integer
      baseNotes:
        items:
          $ref: '#/definitions/handler.CreatePerfumeNoteInput'
        type: array
      created_at:
        example: "2025-04-23T00:00:00Z"
        type: string
      heartNotes:
        items:
          $ref: '#/definitions/handler.CreatePerfumeNoteInput'
        type: array
      name:
        type: string
      perfume_id:
        example: 1
        type: integer
      topNotes:
        items:
          $ref: '#/definitions/handler.CreatePerfumeNoteInput'
        type: array
      updated_at:
        example: "2025-04-23T00:00:00Z"
        type: string
    type: object
  handler.CreateUserData:
    properties:
      email:
        example: user2@me.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: user1234
        type: string
      username:
        example: user2
        type: string
    type: object
  handler.CreateUserResponse:
    properties:
      data:
        $ref: '#/definitions/handler.CreateUserData'
      message:
        type: string
      status:
        type: string
    type: object
  handler.GetOrderResponse:
    properties:
      order_id:
        example: 1
        type: integer
      perfumes:
        items:
          $ref: '#/definitions/handler.CreatePerfumeResponse'
        type: array
    type: object
  handler.HttpResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  handler.LoginData:
    properties:
      token:
        example: it returns jwt token
        type: string
    type: object
  handler.LoginInput:
    properties:
      identity:
        example: user2
        type: string
      password:
        example: user1234
        type: string
    type: object
  handler.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/handler.LoginData'
      message:
        type: string
      status:
        type: string
    type: object
  handler.PasswordInput:
    properties:
      password:
        example: user1234
        type: string
    type: object
  handler.UpdateUserInput:
    properties:
      name:
        example: John Doe
        type: string
    type: object
  model.BaseUser:
    properties:
      email:
        example: user2@me.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: user1234
        type: string
      username:
        example: user2
        type: string
    type: object
  model.UserResponse:
    properties:
      created_at:
        example: "2025-04-23T00:00:00Z"
        type: string
      email:
        example: user2@me.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      password:
        example: user1234
        type: string
      updated_at:
        example: "2025-04-23T00:00:00Z"
        type: string
      username:
        example: user2
        type: string
    type: object
info:
  contact:
    name: g3yk
  description: This is an API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user by username or email and password, returns JWT
        token on success
      parameters:
      - description: Login credentials
        in: body
        name: loginInput
        required: true
        schema:
          $ref: '#/definitions/handler.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      summary: User login
      tags:
      - auth
  /perfume:
    post:
      consumes:
      - application/json
      description: Create a new Perfume
      parameters:
      - description: Perfume
        in: body
        name: createPerfumeInput
        required: true
        schema:
          $ref: '#/definitions/handler.CreatePerfumeInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.CreatePerfumeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      summary: Create a new Perfume
      tags:
      - perfume
  /perfume/add:
    post:
      consumes:
      - application/json
      description: Add perfume to order
      parameters:
      - description: Perfume
        in: body
        name: addPerfumetoOrderInput
        required: true
        schema:
          $ref: '#/definitions/handler.AddPerfumetoOrderInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  properties:
                    id:
                      type: integer
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      security:
      - Bearer: []
      summary: Add perfume to order
      tags:
      - order
  /perfume/note:
    post:
      consumes:
      - application/json
      description: Create a new PerfumeNote
      parameters:
      - description: Perfume Note
        in: body
        name: createPerfumeNoteInput
        required: true
        schema:
          $ref: '#/definitions/handler.CreatePerfumeNoteInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.CreatePerfumeNoteResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      summary: Create a new PerfumeNote
      tags:
      - perfume
  /perfume/order:
    post:
      consumes:
      - application/json
      description: Create a new Order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  properties:
                    id:
                      type: integer
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      security:
      - Bearer: []
      summary: Create a new Order
      tags:
      - order
  /perfume/order/{id}:
    get:
      consumes:
      - application/json
      description: Get an order
      parameters:
      - default: 1
        description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.GetOrderResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      security:
      - Bearer: []
      summary: Get an order
      tags:
      - order
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User credentials
        in: body
        name: createUserInput
        required: true
        schema:
          $ref: '#/definitions/model.BaseUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      summary: Create a new user                                                              j
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User credentials
        in: body
        name: passwordInput
        required: true
        schema:
          $ref: '#/definitions/handler.PasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - default: 5
        description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      summary: Get a user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - default: 5
        description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User credentials
        in: body
        name: updateUserInput
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      security:
      - Bearer: []
      summary: Update a user
      tags:
      - user
  /user/deleted:
    get:
      consumes:
      - application/json
      description: Get all deleted users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.UserResponse'
                  type: array
              type: object
      summary: Get all deleted users
      tags:
      - user
  /user/permanent/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - default: 1
        description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User credentials
        in: body
        name: passwordInput
        required: true
        schema:
          $ref: '#/definitions/handler.PasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.HttpResponse'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - user
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
